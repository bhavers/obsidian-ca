/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/architectures": {
        /** This API is used to create a new architecture from scratch */
        post: operations["createArch"];
    };
    "/architectures/{archId}": {
        /** This API is to get the information of an architecture */
        get: operations["getArchInfo"];
    };
    "/architectures/{archId}/artifacts/instances": {
        /** This API is to get Artifact Instance Summary List */
        get: operations["getArtifactInstanceSummaryList"];
        /** Create an artifact instance */
        post: operations["createArtifactInstance"];
    };
    "/architectures/{archId}/artifacts/instances/{instanceId}": {
        /** This API is to update an artifact instance */
        put: operations["updateArtifactInstance"];
        /** Enter Artifact Instance */
        post: operations["enterArtifactInstance"];
    };
    "/architectures/{archId}/instances/{instanceId}/diagram": {
        /** Generate artifact instance diagram */
        get: operations["generateDiagram"];
    };
    "/architectures/{archId}/CustomizedExport": {
        /** Export Arch as per client's needs */
        post: operations["customizedExport"];
    };
    "/architectures/architecture/search": {
        /** Search Published Architectures from keyword or catalog */
        post: operations["search"];
    };
    "/architectures/asis/{archId}/visit": {
        /** This API is to join team as team view member, only for AsIs Arch. */
        post: operations["visitAsIsArch"];
    };
    "/architecturesvc/ArchitectureAPIs/architectures/{archId}/artifacts/catalog": {
        /** Get Architecture Artifact Catalog */
        get: operations["ArchitectureAPI.getArtifactCatalog"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        PrivacyConstent: {
            /** @description Whether user has accepted privacy. */
            isAccept?: boolean;
            /** @description Country user chose when user accepted privacy. */
            country?: string;
            /**
             * Format: date-time
             * @description Date time user accepted privacy.
             */
            acceptedDate?: string;
        };
        GithubInfo: {
            /** @description GithubInfo id. */
            _id?: string;
            /** @description Github repository url user set. */
            repoUrl?: string;
        };
        UserPreference: {
            /** @description UserPreference _id */
            _id?: string;
            /** @description User interest technologies. Not in use. */
            interestTechnologies?: string[];
            /** @description User interest industries. Not in use. */
            interestIndustries?: string[];
            /** @description User pen hold duration time. Not in use. */
            penHoldDuration?: string;
            /** @description Default template id user set when user creates arch. */
            defaultTemplate?: string;
            /** @description User github info for export architecture to github. */
            defaultGithubInfo?: components["schemas"]["GithubInfo"];
        };
        CAUser: {
            /** @description User id. */
            _id?: string;
            /** @description User full name. */
            fullname?: string;
            /** @description User Notes ID from Blue Page. Only for IBM internal user. */
            notesId?: string;
            /** @description User job reponsibilities from Blue Page. Only for IBM internal user. */
            jobResponsibilities?: string;
            /** @description User avatar from Blue Page. Only for IBM internal user. */
            avatar?: string;
            /**
             * Format: date-time
             * @description User last login date.
             */
            lastLoginDate?: string;
            /** @description Architecture id list the user bookmarked. */
            bookmarkedArchList?: string[];
            /** @description User geographies list from Blue Page. Only for IBM internal user. */
            geographies?: string[];
            /** @description User business units list from Blue Page. Only for IBM internal user. */
            businessUnits?: string[];
            /** @description Collaboration groups id user created. If the user has no collaboration group, the value is []. */
            collaborationGroups?: string[];
            /** @description Chat bot token for user. */
            chatbotToken?: string;
            /** @description User preferences. */
            preference?: components["schemas"]["UserPreference"];
            /** @description User privacy constent status. */
            privacyConstent?: components["schemas"]["PrivacyConstent"];
        };
        Team: {
            /** @description Team _id */
            _id?: string;
            /** @description Team name */
            name?: string;
            /** @description Team description */
            description?: string;
            /** @description Architecture id of this team. */
            teamArch?: string;
            /** @description Architecture owner. */
            owner?: components["schemas"]["ArchBriefTeamUserResponse"];
            /** @description Admin members list */
            adminMembers?: components["schemas"]["ArchBriefTeamUserResponse"][];
            /** @description View members list */
            viewMembers?: components["schemas"]["ArchBriefTeamUserResponse"][];
            /** @description Edit members list */
            editMembers?: components["schemas"]["ArchBriefTeamUserResponse"][];
            /** @description Architecture pen status. */
            penInfo?: components["schemas"]["TeamPenInfo"];
        };
        PeerReview: {
            /** @description Peer review request id */
            _id?: string;
            /** @description Peer review request owner */
            requestOwner: string;
            /** @description Target arch id */
            archId: string;
            /** @description Peer review request type */
            type: string;
            /** @description Business problem of this architecture */
            businessProblem: string;
            /** @description Core technology elements of this architecture */
            coreTechElements: string;
            /**
             * Format: date-time
             * @description Expire date of peer review request
             */
            expireDate: string;
            /**
             * Format: date-time
             * @description Created time of peer review request
             */
            created?: string;
            /**
             * Format: date-time
             * @description If the peer review request is stopped manually by request owner, then the manualExpireDate is the actual expiration date.
             */
            manualExpireDate?: string;
        };
        RequestPeerReviewRequest: {
            /** @description Peer review request id */
            _id?: string;
            /** @description Peer review request owner */
            requestOwner: string;
            /** @description Target arch name */
            archName: string;
            /** @description Peer review request type */
            type: string;
            /** @description Business problem of this architecture */
            businessProblem: string;
            /** @description Core technology elements of this architecture */
            coreTechElements: string;
            /**
             * Format: date-time
             * @description Expire date of peer review request
             */
            expireDate: string;
            /** @description Architecture shared link */
            archLink: string;
        };
        GetAppInfoResponse: {
            id?: string;
            name?: string;
            version?: string;
            description?: string;
            license?: string;
            surveyLink?: string;
            communityLink?: string;
            releaseNotesLink?: string;
        };
        GetAllHeaderItemsResponse: {
            _id?: string;
            image?: string;
            imageContent?: string;
            title?: string;
            desc?: string;
            url?: string;
        };
        PublishArchRequest: {
            id?: string;
            name?: string;
            type?: string;
            archLink?: string;
        };
        RejectArchRequest: {
            id?: string;
            archLink?: string;
        };
        IsSuccessResponse: {
            isSuccess?: boolean;
        };
        IsExistResponse: {
            isExist?: boolean;
        };
        IsSuccessWithMessageResponse: {
            /** @description To identify whether the api executes successfully. If the whole api succeeds, the value is true. Otherwise it is undefined. */
            isSuccess?: boolean;
            /** @description Message of errors or warnings that do not block the main process. */
            warningMessage?: string;
        };
        NewFeatureNotification: {
            id?: string;
            message: string;
            link: string;
            duration: number;
            version: string;
        };
        NewMessageNotification: {
            id?: string;
            message: string;
            duration: number;
        };
        NewMessageNotificationV2: {
            id?: string;
            message: string;
            /** Format: date-time */
            startTime: string;
            duration: number;
        };
        MaintenanceNotification: {
            id?: string;
            message: string;
            maintenanceTime: string;
            duration: number;
        };
        BatchChangeArchOwnerRequest: {
            newOwnerId: string;
            keepOwnerAs?: string;
            withEmail?: boolean;
            archLink: string;
        };
        MergeArchBtwEnvsRequest: {
            id?: string;
            sourceEnv: string;
            targetEnv: string;
            newArchName: string;
            newClientName?: string;
        };
        ArchBriefResponse: {
            _id?: string;
            name?: string;
            type?: string;
            status?: string;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            lastModified?: string;
            team?: components["schemas"]["ArchBriefTeamResponse"];
            template?: components["schemas"]["TemplateResponse"];
            includedArtifacts?: components["schemas"]["ArchBriefIncludedArtifactsResponse"][];
            industry?: components["schemas"]["Industry"][];
            technology?: components["schemas"]["Technology"][];
            technicalCapability?: components["schemas"]["TechnicalCapability"][];
            businessCapability?: components["schemas"]["BusinessCapability"][];
            tag?: components["schemas"]["Tag"][];
            client?: components["schemas"]["Client"][];
            executiveSummary?: components["schemas"]["ExecutiveSummary"][];
        };
        FilterArchResponse: {
            totalNum: number;
            data: components["schemas"]["ArchBriefResponse"][];
            filter?: components["schemas"]["FilterArchResponse_Filter"];
        };
        FilterArchResponse_Filter: {
            tags: components["schemas"]["Tag"][];
            clients: components["schemas"]["Client"][];
            assetOwners?: components["schemas"]["CAUser"][];
        };
        DashboardFilterResponse: {
            industries: string[];
            bus: string[];
            iots: string[];
        };
        OverallLog: {
            _id: string;
            /** Format: double */
            totalPublicAssetCount: number;
            /** Format: double */
            totalPrivateAssetCount: number;
            /** Format: double */
            totalAsIsAssetCount: number;
            /** Format: double */
            totalUserCount: number;
            /** Format: double */
            totalAssetOwnerCount: number;
        };
        DashboardFilterRequest: {
            bu?: string;
            iot?: string;
            industry?: string;
        };
        CombinedAssetPoint: {
            _id: string;
            /** Format: double */
            publicAssetCount: number;
            /** Format: double */
            privateAssetCount: number;
            /** Format: double */
            asIsAssetCount: number;
            industry: string;
            bu: string;
            iot: string;
            /** Format: double */
            publicInCounting?: number;
            /** Format: double */
            asIsInCounting?: number;
            /** Format: double */
            privateInCounting?: number;
        };
        CombinedUserPoint: {
            _id: string;
            /** Format: double */
            userCount: number;
            /** Format: double */
            assetOwnerCount: number;
            bu: string;
            iot: string;
        };
        AssetLog: {
            _id: string;
            ownerId: string;
            /** Format: date-time */
            lastModified: string;
            assetId: string;
            name?: string;
            type?: string;
            industries?: string[];
            status: string;
            isAsIs: boolean;
            /** Format: double */
            numOfCopied: number;
            rankValue: string;
            /** Format: double */
            rank: number;
            copiers?: string[];
        };
        DashboardSorterRequest: {
            assetStatus?: string;
            sortBy?: string;
        };
        GetSearchCatalogResponse: {
            /**
             * @default [
             *   "Aerospace and Defense",
             *   "Banking & FM",
             *   "Chemical & Petroleum",
             *   "Consumer",
             *   "Cross-Industry",
             *   "Education",
             *   "Electronics",
             *   "Energy & Utilities",
             *   "Government",
             *   "Healthcare & Life Sciences",
             *   "Industrial Products",
             *   "Insurance",
             *   "Telecommunications, Media & Entertainment",
             *   "Travel & Transportation"
             * ]
             */
            industry: string[];
            /**
             * @default [
             *   "Analytics",
             *   "Blockchain",
             *   "Cloud Computing",
             *   "Cognitive Computing",
             *   "Conversational Services & Chatbots",
             *   "Internet of Things",
             *   "Mobile Computing",
             *   "Security",
             *   "Systems Infrastructure"
             * ]
             */
            technology: string[];
            /** @default [] */
            businessCapability: string[];
            /**
             * @default [
             *   "API",
             *   "DevOps",
             *   "Hybrid Architecture",
             *   "Integration",
             *   "Microservices",
             *   "Mobile",
             *   "Security",
             *   "Service Management",
             *   "System Management",
             *   "Virtualization"
             * ]
             */
            technicalCapability: string[];
            /**
             * @default [
             *   "Analytics",
             *   "Asset Management & Maintenance",
             *   "Automative Retail Transformation",
             *   "Blockchain",
             *   "Business Process Modernization",
             *   "Care & Health Management Transformation",
             *   "Channel Collaboration",
             *   "Cognitive",
             *   "Cognitive Construction & Operations",
             *   "Cognitive Customer Insight & Engagement",
             *   "Cognitive Innovation",
             *   "Cognitive Operations",
             *   "Cognitive Value Chain",
             *   "Connected Enterprise",
             *   "Connected Industrial Machinery",
             *   "Connected Platform",
             *   "Connected Vehicle",
             *   "Consumer Experience",
             *   "Core Systems",
             *   "Core Systems Transformation",
             *   "Customer Insight & Engagement",
             *   "Customer Loyalty, Sales, Service & Marketing",
             *   "Data",
             *   "Digital Customer Engagement",
             *   "Digital Transformation",
             *   "Enterprise Transformation",
             *   "Front Office Transformation",
             *   "Hybrid cloud",
             *   "Integration",
             *   "IoT",
             *   "Merchandising & Supply Networks",
             *   "Microservices",
             *   "Mobile",
             *   "Network and Platform Agility",
             *   "Operating Model Management",
             *   "Operations",
             *   "Operations Innovation",
             *   "Operations Planning & Optimization",
             *   "Payments & Transaction Services",
             *   "Private cloud",
             *   "Public cloud",
             *   "R&D Management",
             *   "R&D Transformation",
             *   "Risk Management",
             *   "Sales & Customer Management",
             *   "Sales & Marketing Management",
             *   "Security",
             *   "Shopping & Customer Experience",
             *   "Supply Chain",
             *   "Systems",
             *   "Transformation",
             *   "Work & Asset Optimization"
             * ]
             */
            tag: string[];
            tagGroups: components["schemas"]["GetSearchCatalogTagGroupResponse"][];
            taxonomies: string[];
            primaryCapability?: string[];
        };
        SearchRequest: {
            keyword?: string;
            industries?: string[];
            technologies?: string[];
            businessObjectives?: string[];
            technicalChallenges?: string[];
            tags?: string[];
            pagination?: components["schemas"]["SearchPaginationRequest"];
            archType?: string[];
            scope?: string[];
            searchBy: string;
            implementations?: string[];
            capabilities?: string[];
        };
        SearchResponse: {
            /** Format: double */
            publishedArchCount?: number;
            /** Format: double */
            asisArchCount?: number;
            implementations?: string[];
            result?: components["schemas"]["ArchBriefResponse"][];
        };
        SubmitRequest: {
            requestArchName: string;
            requestArchType: string;
            isIBMInternalOnly: string;
            additionalInfoForIBMInternal?: string;
            comment?: string;
        };
        GetRequestorReqHistoryResponse: {
            processId?: string;
            archName?: string;
            submitDate?: string;
            status?: string;
        };
        DeliverToReviewersRequest: {
            leadReviewer: string;
            reviewers?: components["schemas"]["x-any"][];
            /** Format: date-time */
            targetCompleteDate?: string;
        };
        PublishingRequestResponse: {
            processId?: string;
            requestArchName?: string;
            submitDate?: string;
            archOwner?: string;
            targetReviewDate?: string;
            status?: string;
            reviewers?: components["schemas"]["PublishingRequestReviewerResponse"][];
        };
        ViewRequestInfoResponse: {
            submitComment?: string;
            isIBMInternalOnly?: string;
            additionalInfoForIBMInternal?: string;
        };
        ViewArchInfoResponse: {
            isIBMInternalOnly?: string;
            requestArchName?: string;
            requestArchType?: string;
            clientName?: string;
            industries?: string[];
            technologies?: string[];
            tags?: string[];
        };
        MakeDecisionRequest: {
            decision: string;
            comment: string;
            criteriaCheckList: string;
        };
        AddCommentRequest: {
            commentedBy: string;
            content: string;
        };
        CreateArchRequest: {
            /** @description Architecture name, should be unique. */
            name: string;
            /** @description Architecture type, should be 'Solution', or will lead to 400 error. */
            type: string;
            /** @description For whom this architecture engage. */
            clientName?: string;
            /** @description sales' connection number. */
            salesConnectNum?: string;
            /** @description A foriegn key to CAST, only required for the CAST team, for internal call just leave it as empty. */
            castSolutionId?: string;
            /** @description Tags the architecture attached to. Please contact with CA team to get the latest value list. */
            tags?: string[];
            /** @description Taxonomies attached to this architecture. Please refer the value in the array: ["Be more responsive", "Become more digital", "Grow the top line", "Modernize ways of working", "Reduce business costs", "Integrating apps & data", "IT Costs", "Lack of IT Skills", "Project Delivery Time", "Unreliable IT", "Vendor Lock-in"]. */
            taxonomies?: string[];
            /** @description Industries the architecture belong to. Please refer the value in the array: ["Aerospace and Defense", "Banking & FM", "Chemical & Petroleum", "Consumer", "Cross-Industry", "Education", "Electronics", "Energy & Utilities", "Government", "Healthcare & Life Sciences", "Industrial Products", "Insurance", "Telecommunications, Media & Entertainment", "Travel & Transportation"]. */
            industries?: string[];
            /** @description Technologies the architecture used. Please refer the value in the array: ["Analytics", "Blockchain", "Cloud Computing", "Cognitive Computing", "Conversational Services & Chatbots", "Internet of Things", "Mobile Computing", "Security", "Systems Infrastructure"]. */
            technologies?: string[];
            /** @description Not supported, leave the array empty for now. */
            businessCapabilities?: string[];
            /** @description Not supported, leave the array empty for now. */
            technicalCapabilities?: string[];
            /** @description The ToCtemplateId user chose, if not provided, using default tocTemplateId = template_company_ibm */
            tocTemplateId?: string;
            /** @description Set it true/false to make ToCtemplate as default or not, using default isDefaultTemplate = false. */
            isDefaultTemplate?: boolean;
        };
        CreateArchResponse: {
            createdArchId: string;
        };
        GetUserOwnedTOCTemplatesResponse: {
            _id: string;
            name: string;
            description?: string;
            /** Format: date-time */
            created: string;
            categoryName?: string;
            groupName?: string;
            isGlobalVisible?: boolean;
            isGlobalDefaultTemplate?: boolean;
            isDefaultTemplate?: boolean;
            artifacts?: components["schemas"]["GetArtifactCatalogResponse"][];
        };
        UpdateArchInfoRequest: {
            name: string;
            isAsIs: boolean;
            isDiscoverable?: boolean;
            /** @description Leave it as null if not needed. */
            industries?: string[];
            /** @description Leave it as null if not needed. */
            technologies?: string[];
            /** @description Leave it as null if not needed. */
            businessCapabilities?: string[];
            /** @description Leave it as null if not needed. */
            technicalCapabilities?: string[];
            /** @description Leave it as null if not needed. */
            tags?: string[];
            /** @description Client's name, should be existed or will lead to 400 error. */
            clientName: string;
            /** @description Seller's connection number, should be existed or will lead to 400 error. */
            salesConnectNum: string;
            /** @description CAST related parameter, leave it as null if not needed. */
            castSolutionId?: string;
            /**
             * @description IBM only or Kyndryl only or bu,geo(eg.IBM/Kyndryl/GBS/NA/EMEA)
             * @example IBM
             */
            archVisibility?: string;
        };
        IsUpdatedResponse: {
            isUpdated?: boolean;
            /** Format: date-time */
            lastModified?: string;
            lastModifiedUser?: components["schemas"]["CAUser"];
        };
        GetArchInfoResponse: {
            archId: string;
            lastModified?: string;
            /** @description Architecture name. */
            name?: string;
            /**
             * @description IBM only or Kyndryl only or bu,geo(eg.IBM/Kyndryl/GBS/NA/EMEA)
             * @example IBM:
             */
            archVisibility?: string;
            /** @description Last modified info. */
            lastModifiedInfo?: components["schemas"]["LastModifiedInfoResponse"];
            /** @description Last modified info. */
            lastModifiedUser?: components["schemas"]["CAUser"];
            /** @description Industries the architecture belong to. */
            industries?: string[];
            /** @description Technoligies the architecture used. */
            technologies?: string[];
            /** @description Not supported now, should be []. */
            businessCapabilities?: string[];
            /** @description TechnicalCapabilities the architecture used. */
            technicalCapabilities?: string[];
            /** @description Architecture taxonomies. */
            taxonomies?: string[];
            /** @description Architecture tags. */
            tags?: string[];
            /** @description Client's name. */
            clientName?: string;
            /** @description Sales' connection number. */
            salesConnectNum?: string;
            /** @description If this arch is created by CAST, then will have this castSolutionId field. */
            castSolutionId?: string;
            /** @description If arch is shared As-Is, then the value is true. Otherwise, the value is false. */
            isAsIs?: boolean;
            /** @description Pending arch only included in search result when value is true */
            isDiscoverable?: boolean;
            /** @description ToC Template info for this architecture. */
            template?: components["schemas"]["TemplateResponse"];
            /** @description Architecture's team info. */
            team?: components["schemas"]["Team"];
            /** @description Architecture's owner. */
            owner?: components["schemas"]["CAUser"];
        };
        GetArchInstancePenInfoResponse: {
            instanceId?: string;
            penHolder?: components["schemas"]["ArchBriefTeamUserResponse"];
        };
        Tag: {
            _id: string;
            name: string;
            description?: string;
        };
        RenameLabelRequest: {
            name: string;
        };
        GetArchsByInstanceProjectRequest: {
            /** @description maze instance project id, eg;[1184,1190] */
            projectIds: number[];
            /** @description artifact type, eg.maze is "assetartifact_deploymentmodel_cloud" */
            artifactType: string;
        };
        Client: {
            _id: string;
            name: string;
            description?: string;
            userId: string;
        };
        Label: {
            _id: string;
            name: string;
            description?: string;
            userId?: string;
        };
        AddLabelResponse: {
            labelId: string;
        };
        CommentRequest: {
            /** @description The content of the comment, can't be null. */
            content: string;
            /** @description Comment userId, can't be null. */
            commentedBy: string;
        };
        CommentResponse: {
            _id: string;
            content: string;
            /** Format: date-time */
            created: string;
            commentedByUserInfo: Record<string, never>;
        };
        CommentWithReplyResponse: {
            comment: components["schemas"]["CommentResponse"];
            artifactId: string;
            instanceId: string;
            reply: components["schemas"]["CommentResponse"][];
        };
        ShareLinkRequest: {
            /** @description Shared architecture id. */
            archId: string;
            /** @description Share to user list. */
            toList: string[];
            /** @description Share message. */
            message?: string;
            /** @description Url of shared architecture. */
            archLink: string;
        };
        CopyArchRequest: {
            /** @description name of new architecture. */
            name: string;
            /** @description name of client. */
            clientName?: string;
            /** @description seller's connection number. */
            salesConnectNum?: string;
            /** @description Link of the original architecture. */
            archLink: string;
            /** @description The template Id of target architecture */
            targetTemplateId?: string;
            /** @description The toc mapping indicating where the instances are copied to. [{instanceId:xx, artifactTypeId:xx}] */
            tocMapping?: unknown[];
        };
        CopyArchResponse: {
            newArchId: string;
        };
        GetArtifactCatalogResponse: {
            _id: string;
            /** @description Artifact name displays in ToC catalog. */
            displayName: string;
            /** @description Number displays in the beginning of each item in ToC catalog. */
            globalTOCPosition: string;
            child?: components["schemas"]["GetArtifactCatalogResponse"][];
            /** @description diagram, text */
            format?: string;
            /** @description If there is any artifact instance under this artifact section, then hasContent is true. */
            hasContent?: boolean;
            /**
             * @description Available artifactTypes are
             * 'assetartifact_executivesummary',
             * 'assetartifact_businesschallenge',
             * 'assetartifact_systemcontext',
             * 'assetartifact_usecase_ucdiagram',
             * 'assetartifact_usecase_uctext',
             * 'assetartifact_functionalrequirement',
             * 'assetartifact_nonfunctionalrequirement',
             * 'assetartifact_logical_datamodel',
             * 'assetartifact_architectureoverview_aodservice',
             * 'assetartifact_architectureoverview_enterprise',
             * 'assetartifact_architectureoverview_itsystem',
             * 'assetartifact_architectureoverview_usagescenario',
             * 'assetartifact_architecturedecision',
             * 'assetartifact_componentmodel_staticview',
             * 'assetartifact_componentmodel_dynamicview',
             * 'assetartifact_componentmodel_collaborationdiagram',
             * 'assetartifact_operationalmodel_logicaloperational',
             * 'assetartifact_operationalmodel_physicaloperational',
             * 'assetartifact_deploymentmodel_cloud',
             * 'assetartifact_risk',
             * 'assetartifact_assumption',
             * 'assetartifact_issue',
             * 'assetartifact_dependency',
             * 'assetartifact_architecture_principles',
             * 'assetartifact_miscdiagram',
             * 'assetartifact_notes'.
             */
            artifactType?: string;
            /**
             * @description ArtifactTypeName corresponds to a section displayName within the architecture’s TOC template. For the default TOC template, the mapping between artifactTypeName and artifactType are
             * 'Overview' - 'assetartifact_executivesummary',
             * 'Business Challenge' - 'assetartifact_businesschallenge',
             * 'System Context' - 'assetartifact_systemcontext',
             * 'Use Case Diagram'- 'assetartifact_usecase_ucdiagram',
             * 'Use Case' - 'assetartifact_usecase_uctext',
             * 'Functional Requirements' - 'assetartifact_functionalrequirement',
             * 'Non Functional Requirements' - 'assetartifact_nonfunctionalrequirement',
             * 'Logical Data Model' - 'assetartifact_logical_datamodel',
             * 'Services View' - 'assetartifact_architectureoverview_aodservice',
             * 'Enterprise View' - 'assetartifact_architectureoverview_enterprise',
             * 'IT System View' - 'assetartifact_architectureoverview_itsystem',
             * 'Usage Scenario' - 'assetartifact_architectureoverview_usagescenario',
             * 'Architectural Decisions' - 'assetartifact_architecturedecision',
             * 'Static View' - 'assetartifact_componentmodel_staticview',
             * 'Sequence View' - 'assetartifact_componentmodel_dynamicview',
             * 'Collaboration View' - 'assetartifact_componentmodel_collaborationdiagram',
             * 'Logical Operational View' - 'assetartifact_operationalmodel_logicaloperational',
             * 'Prescribed Operational View' - 'assetartifact_operationalmodel_physicaloperational',
             * 'Cloud Deployment Model' - 'assetartifact_deploymentmodel_cloud' ,
             * 'Risks' - 'assetartifact_risk',
             * 'Assumptions' - 'assetartifact_assumption',
             * 'Issues' - 'assetartifact_issue',
             * 'Dependencies' - 'assetartifact_dependency',
             * 'Architectural Principles' - 'assetartifact_architecture_principles',
             * 'Misc Diagram' - 'assetartifact_miscdiagram',
             * 'Notes' - 'assetartifact_notes'.
             */
            artifactTypeName?: string;
        };
        ArtifactInstanceRequest: {
            /** @description MxGraph XML, only required for the graphic instances. */
            uiInfo?: string;
            /** @description The core information of the instance. */
            coreInfo: Record<string, never>;
            /** @description The cloud template Id which will be associated/copied. Applicable for CDM. */
            projectId?: number;
            /** @description The cloud template description which will be associated/copied. Applicable for CDM. */
            projectDescription?: string;
            /** @description 1)create-create a new cloud template along with the new CDM instance; 3)copy-copy an existing cloud template; */
            mazeActionType?: string;
        };
        CreateArtifactInstanceResponse: {
            createdInstanceId: string;
        };
        CopyArtifactInstancesFromResourceRequest: {
            archId: string;
            instanceList: components["schemas"]["CopyArtifactInstancesFromResourceItemRequest"][];
        };
        RenderDiagramInstancesFromMiscRequest: {
            /** @description Source misc diagram's instance id. */
            sourceId: string;
            /** @description If the source misc diagram instance will be removed after this copy, then the value is true. Otherwise is false. */
            deleteSource: boolean;
            /** @description Target instance name after copy. */
            targetName: string;
        };
        GetArtifactInstanceSummaryListResponse: {
            _id: string;
            name: string;
            description?: string;
            lastModifiedInfo: components["schemas"]["LastModifiedInfoResponse"];
            additionalInfo?: Record<string, never>;
            instPenInfo?: components["schemas"]["InstancePenInfo"];
        };
        EnterArtifactInstanceRequest: {
            /** @description If anyone else is editing this instance, set viewMode as true, else false. */
            viewMode: boolean;
            /** @description Url of the target instance. */
            instanceLink: string;
        };
        ArtifactInstanceResponse: {
            uiInfo: string;
            coreInfo: Record<string, never>;
            instancePenInfo: components["schemas"]["InstancePenInfo"];
        };
        CopyArtifactInstanceRequest: {
            id?: string;
            name: string;
        };
        RenameArtifactInstanceRequest: {
            /** @description New name of the instance. */
            newName: string;
            /** @description New id of the instance, only used for 'UseCase', 'ArchitecturalDecision', 'FunctionalRequirement' and 'NonFunctionalRequirement'. */
            newId?: string;
        };
        AddTeamMembersRequest: {
            /**
             * @description list of admin members' id
             * @default []
             */
            adminMembers: string[];
            /**
             * @description list of editor members' id
             * @default []
             */
            editMembers: string[];
            /**
             * @description list of viewer members' id
             * @default []
             */
            viewMembers: string[];
            /** @description message */
            message: string;
            /** @description Url of target architecture. */
            archLink: string;
        };
        LeaveArchTeamRequest: {
            /** @description Url of the target architecture. */
            archLink: string;
        };
        ArchTeamMembersInfoResponse: {
            teamOwner: string;
            adminMembers?: components["schemas"]["CAUser"][];
            viewMembers?: components["schemas"]["CAUser"][];
            editMembers?: components["schemas"]["CAUser"][];
            pendingAdminMembers?: string[];
            pendingViewMembers?: string[];
            pendingEditMembers?: string[];
        };
        PenChangeEmailDataRequest: {
            /** @description message */
            message?: string;
            /** @description Url of the target architecture. */
            archLink: string;
            /**
             * Format: double
             * @description Remain time of the architecture pen, default as 14400.
             */
            duration: number;
        };
        PermissionEmailDataRequest: {
            /** @description Url of target architecture. */
            archLink: string;
            /** @description Team member Id. */
            teamMemberId: string;
        };
        ExportArchAsExcelRequest: {
            archElement: components["schemas"]["ExportArchAsExcelRequest_ArchElement"];
            textArtifact: components["schemas"]["ExportArchAsExcelRequest_TextArtifact"];
            diagramArtifact?: components["schemas"]["ExportArchAsExcelRequest_DiagramArtifact"];
        };
        CollaborationGroupResponse: {
            _id?: string;
            name?: string;
            description?: string;
            groupMembers?: components["schemas"]["CollaborationGroupPersonResponse"][];
        };
        CollaborationGroupRequest: {
            name: string;
            description?: string;
            groupMembers?: string[];
            relGroups: string[];
        };
        CreateCollaborationGroupResponse: {
            newGroupId: string;
        };
        FindPersonAndCollaborationGroupResponse: {
            personList?: components["schemas"]["CollaborationGroupPersonResponse"][];
            collaborationGroupList?: components["schemas"]["CollaborationGroupResponse"][];
        };
        SolAdvCreateOpportunityRequest: {
            /** @description primary key in reference to solution advisor. */
            castSolutionId?: string;
            logicalNodesAndSolAreaMappings: components["schemas"]["SolAdvCreateOpportunityRequest_logicalNodesAndSolAreaMapping"][];
        };
        SolAdvCreateOpportunityResponse: {
            solId?: string;
        };
        SolAdvUpdateOpportunityRequest: {
            solId: string;
            logicalNodesAndSolAreaMappings: components["schemas"]["SolAdvUpdateOpportunityRequest_logicalNodesAndSolAreaMapping"][];
        };
        SolAdvGetInstanceSolAdvInfoResponse: {
            instanceId: string;
            solId: string;
            requestUserId: string;
            /** Format: date-time */
            lastEstimationDate?: string;
            solAdvStaffingInfo?: Record<string, never>;
            cogArchLNAndSolAdvSolAreaMappingList?: components["schemas"]["SolAdvGetInstanceSolAdvInfoResponse_CogArchLNAndSolAdvSolAreaMapping"][];
            solAdvSolEstimationList?: components["schemas"]["SolAdvGetInstanceSolAdvInfoResponse_SolAdvSolEstimation"][];
        };
        SolAdvValidateOpportunityRequest: {
            solId: string;
            logicalNodesAndSolAreaMappings: components["schemas"]["SolAdvValidateOpportunityRequest_logicalNodesAndSolAreaMapping"][];
        };
        OrphanElement: {
            labels: string[];
            properties: components["schemas"]["OrphanElementProperties"];
        };
        AuditLogEntry: {
            _id: string;
            archId?: string;
            archChangeLog?: components["schemas"]["ArchitectureChangeLog"][];
        };
        ExportArchToGithubRequest: {
            repoUrl: string;
            accessToken: string;
            comments: string;
            archName: string;
            archLink: string;
            /** @default */
            message?: string;
        };
        FetchFileListFromGithubRequest: {
            repoUrl: string;
            accessToken: string;
        };
        ImportArchFromGithubRequest: {
            repoUrl: string;
            accessToken: string;
            sha: string;
            path: string;
        };
        MxgraphExportRequest: {
            format: string;
            filename: string;
            bg: string;
            /** Format: double */
            w: number;
            /** Format: double */
            h: number;
            xml: string;
        };
        MxgraphSaveRequest: {
            format: string;
            filename: string;
            xml: string;
        };
        CustomizeTemplate: {
            _id: string;
            name: string;
            userId?: string;
            tocTemplateId?: string;
            archId?: string;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            lastModified?: string;
            template?: string;
        };
        ArchBriefTeamResponse: {
            _id?: string;
            owner?: components["schemas"]["ArchBriefTeamUserResponse"];
            viewMembers?: components["schemas"]["ArchBriefTeamUserResponse"][];
            teamPenInfo?: components["schemas"]["TeamPenInfo"];
            instancePenInfo?: components["schemas"]["InstancePenInfo"];
        };
        TemplateResponse: {
            /** @description ToC Template id. */
            _id?: string;
            /** @description ToC Template name. */
            name?: string;
            /** @description Description of Toc Template. */
            description?: string;
            /** @description If the ToC Template is global default template, then the value is true. Otherwise, it is false. */
            isGlobalDefaultTemplate?: boolean;
        };
        ArchBriefIncludedArtifactsResponse: {
            _id?: string;
            type?: string;
            typeId?: string;
            artifactTypeId?: string;
            globalTOCPosition?: string;
        };
        Industry: {
            _id: string;
            name: string;
            description?: string;
        };
        Technology: {
            _id: string;
            name: string;
            description?: string;
        };
        TechnicalCapability: {
            _id: string;
            name: string;
            description?: string;
        };
        BusinessCapability: {
            _id: string;
            name: string;
            description?: string;
        };
        ExecutiveSummary: {
            _id: string;
            summaryText?: string;
            /** Format: date-time */
            lastModified?: string;
            lastModifiedUserId?: string;
        };
        GetSearchCatalogTagGroupResponse: {
            group: string;
            tags: string[];
        };
        SearchPaginationRequest: {
            /**
             * Format: double
             * @default 1
             */
            pageNumber?: number;
            /**
             * Format: double
             * @default 24
             */
            limit?: number;
            /** @default name */
            orderBy?: string;
        };
        "x-any": unknown;
        PublishingRequestReviewerResponse: {
            _id?: string;
            avatar?: string;
        };
        LastModifiedInfoResponse: {
            /**
             * Format: date-time
             * @description Last modified time (utc).
             */
            date?: string;
            /** @description Last modified user id. */
            userId?: string;
            /** @description Avatar of last modified user. */
            avatar?: string;
        };
        ArchBriefTeamUserResponse: {
            /** @description User id. */
            _id?: string;
            /** @description User full name. */
            fullname?: string;
            /** @description User avatar. */
            avatar?: string;
            /** @description User job responsibilities. */
            jobResponsibilities?: string;
        };
        CopyArtifactInstancesFromResourceItemRequest: {
            _id: string;
            id?: string;
            name: string;
        };
        InstancePenInfo: {
            isEditable?: boolean;
            penHolder?: components["schemas"]["ArchBriefTeamUserResponse"];
            instanceId?: string;
        };
        ExportArchAsExcelRequest_ArchElement: {
            /** @description whether need to export actors */
            selectActors: boolean;
            /** @description whether need to export Generic Groups */
            selectGenericGroup?: boolean;
            /** @description whether need to export logical comonents */
            selectLogicalComponents: boolean;
            /** @description whether need to export logical nodes */
            selectLogicalNodes: boolean;
            /** @description whether need to export physical components */
            selectPhysicalComponents?: boolean;
            /** @description whether need to export deploy units */
            selectDeploymentUnits?: boolean;
            /** @description whether need to export omlocations */
            selectOMLocations?: boolean;
            /** @description whether need to export physical nodes */
            selectPhysicalNodes?: boolean;
            /** @description whether need to export logical nodes & physical components */
            selectNodePlusImplementation?: boolean;
        };
        ExportArchAsExcelRequest_TextArtifact: {
            /** @description whether need to export overview */
            selectOverview: boolean;
            /** @description whether need to export business challenge */
            selectBusinessChallenge: boolean;
            /** @description whether need to export functional requirements */
            selectFunctionalRequirements: boolean;
            /** @description whether need to export non functional requirements */
            selectNonFunctionalRequirements: boolean;
            /** @description whether need to export usecases */
            selectUseCases: boolean;
            /** @description whether need to export architectural decisions */
            selectArchitecturalDecisions: boolean;
            /** @description whether need to export architectural principles */
            selectArchitecturePrinciples: boolean;
            /** @description whether need to export risks */
            selectRisks: boolean;
            /** @description whether need to export assumptions */
            selectAssumptions: boolean;
            /** @description whether need to export issues */
            selectIssues: boolean;
            /** @description whether need to export dependencies */
            selectDependencies: boolean;
        };
        ExportArchAsExcelRequest_DiagramArtifact: {
            /** @description whether need to export index of the diagrams */
            selectDiagramIndex: boolean;
            /** @description whether need to export system context */
            selectSystemContext: boolean;
            /** @description whether need to export aodservices */
            selectAODServices: boolean;
            /** @description whether need to export aoditsystem */
            selectAODITSystem: boolean;
            /** @description whether need to export aodenterprise */
            selectAODEnterprise: boolean;
            /** @description whether need to export cmstatic view */
            selectCMStaticView: boolean;
            /** @description whether need to export cmdynamic view */
            selectCMDynamicView: boolean;
            /** @description whether need to export lomview */
            selectLOMView: boolean;
            /** @description whether need to export pomview */
            selectPOMView: boolean;
            /** @description whether need to export usage scenario */
            selectUsageScenario: boolean;
            /** @description whether need to export erd */
            selectLogicalERD: boolean;
            /** @description whether need to export ucd */
            selectUseCaseDiagram: boolean;
        };
        CollaborationGroupPersonResponse: {
            _id?: string;
            email?: string;
            fullname?: string;
            avatar?: string;
        };
        SolAdvCreateOpportunityRequest_logicalNodesAndSolAreaMapping: {
            /** @description logical node's id. */
            logicalNodeId: string;
            /** @description supported area name, provided by solution advisor. */
            solAreaName: string;
        };
        SolAdvUpdateOpportunityRequest_logicalNodesAndSolAreaMapping: {
            logicalNodeId: string;
            solAreaName: string;
        };
        SolAdvGetInstanceSolAdvInfoResponse_CogArchLNAndSolAdvSolAreaMapping: {
            logicalNodeId: string;
            solAreaId: string;
            solAreaName: string;
        };
        SolAdvGetInstanceSolAdvInfoResponse_SolAdvSolEstimation: {
            solAreaId: string;
            solAreaName: string;
            effort: string;
            storagePath: string;
            /** Format: double */
            id?: number;
        };
        SolAdvValidateOpportunityRequest_logicalNodesAndSolAreaMapping: {
            logicalNodeId: string;
            solAreaName: string;
        };
        OrphanElementProperties: {
            name: string;
            _id: string;
            description?: string;
        };
        ArchitectureChangeLog: {
            _id: string;
            type?: string;
            user?: components["schemas"]["Collaborator"];
            /** Format: date-time */
            date?: string;
            description?: string;
            appVersion?: string;
            dataVersion?: string;
            collaborator?: components["schemas"]["Collaborator"][];
            perviousRole?: string;
            newRole?: string;
            ArtifactType?: string;
            instanceName?: string;
        };
        TeamPenInfo: {
            /**
             * Format: date-time
             * @description Date time user got the pen.
             */
            refreshDate?: string;
            /** @description Pen holder info. */
            teamPenHolder?: components["schemas"]["ArchBriefTeamUserResponse"];
        };
        Collaborator: {
            _id: string;
            email: string;
            fullname: string;
        };
        TagRequest: {
            id?: string;
            query?: string;
        };
        ExportCustomizeReportViaDocGenRequest: {
            template: components["schemas"]["CustomizeReportSection"];
        };
        CustomizeReportSection: {
            /** @description Sub-section or content of this section. */
            child: (components["schemas"]["CustomizeReportContent"] | components["schemas"]["CustomizeReportSection"])[];
            /** @description Display name user typed in. */
            displayName: string;
            /** @description Initial name of the section. */
            initialName: string;
            /**
             * @description Should be section.
             * @default section
             */
            type: string;
        };
        CustomizeReportContent: {
            /** @description Display name user typed in. */
            displayName: string;
            /** @description Initial name of the content. */
            initialName: string;
            /**
             * @description Assetartifacttype of instance.
             * @enum {string}
             */
            artifactType:
                | "assetartifact_executivesummary"
                | "assetartifact_businesschallenge"
                | "assetartifact_usecase_uctext"
                | "assetartifact_functionalrequirement"
                | "assetartifact_nonfunctionalrequirement"
                | "assetartifact_architecturedecision"
                | "assetartifact_risk"
                | "assetartifact_assumption"
                | "assetartifact_issue"
                | "assetartifact_dependency"
                | "assetartifact_architecture_principles"
                | "assetartifact_notes"
                | "assetartifact_systemcontext"
                | "assetartifact_usecase_ucdiagram"
                | "assetartifact_architectureoverview_aodservice"
                | "assetartifact_architectureoverview_enterprise"
                | "assetartifact_architectureoverview_itsystem"
                | "assetartifact_architectureoverview_usagescenario"
                | "assetartifact_componentmodel_staticview"
                | "assetartifact_componentmodel_dynamicview"
                | "assetartifact_operationalmodel_logicaloperational"
                | "assetartifact_operationalmodel_physicaloperational"
                | "assetartifact_logical_datamodel";
            /** @description whether have content */
            hasContent: boolean;
            /**
             * @description should be 'content'
             * @default content
             */
            type: string;
            /** @description target instance id */
            instanceId: string;
            /** @description assetartifacttype name of the instance id */
            artifactTypeName: string;
            /** @description assetartifacttype id of the instance id */
            artifactTypeId: string;
            /** @description assetartifacttype display name of the instance id */
            artifactTypeDisplayName: string;
        };
        CreateArchFromOfflineResponse: {
            /** @description success or not */
            succeed: boolean;
            /** @description if the architecture name is already exists, it will be true, and the arch will be renamed automatically. */
            nameChanged: boolean;
            /** @description if the architecture name contains special charactor then true else false */
            isNameSpecial: boolean;
            /** @description if arch is created successfully, then return the new created arch id */
            createdArchId?: string;
        };
        ExportOfflinePackRequest: {
            /** @description to download "architecture" or "application" or both */
            scope: string[];
            /** @description id list of architecture */
            archIds: string[];
        };
        ExportOfflinePackResponse: {
            /** @description to download "architecture" or "application" or both */
            scope: string[];
            /** @description id list of architecture */
            archIds: string[];
            /** @description key:value pairs of archId:archName */
            archNames?: Record<string, never>;
            /** @description key:value pairs of archId:[fileNames] */
            fileNames?: Record<string, never>;
        };
        GetArchsByProjectIdsResponse: {
            /** @description maze instance projectId */
            projectId: string;
            /** @description arch id */
            _id: string;
            /** @description arch name */
            name: string;
            /** @description salesConnectNum */
            salesConnectNum?: string;
            /** @description status */
            status?: string;
            /** @description isAsIs */
            isAsIs?: boolean;
            /** @description lastModifiedUserId */
            lastModifiedUserId?: string;
            /** @description lastModified */
            lastModified?: string;
            /** @description type */
            type?: string;
            /** @description rankValue */
            rankValue?: string;
            /** @description isDiscoverable */
            isDiscoverable?: boolean;
        };
        ErrorResponse: {
            statusCode?: number;
            name?: string;
            message?: string;
            status?: number;
            stack?: string;
        };
        FilterArchRequest: {
            /** @description The client _ids Architectures refer to. */
            clients?: string[];
            /** @description The tgs _ids Architectures attached to. */
            tags?: string[];
            /** @description The owner _ids of Architectures. */
            assetOwners?: string[];
            /** @description The sort strategy of the result, only support by 'name' and by 'lastModified'. */
            orderBy?: string;
            /** @description Page number of the result. */
            page: number;
        };
        DashboardUserMetricsRequest: {
            /** @description select geo */
            iot?: string;
            /** @description select bu */
            bu?: string;
            /** @description select focusRole */
            focusRole?: string;
        };
        DashboardUserMetricsResponse: {
            /** @description id */
            _id: string;
            /** @description geo name */
            iot?: string;
            /** @description bu name */
            bu?: string;
            /** @description focus Role name */
            focusRole?: string;
            /** @description total users number */
            totalUserCount?: number;
            /** @description published Curated Asset User number */
            publishCuratedAssetUserCount?: number;
            /** @description published As Is Asset Discover User number */
            publishAsIsAssetDiscoverUserCount?: number;
            /** @description published AsIs Asset Non Discover User number */
            publishAsIsAssetNonDiscoverUserCount?: number;
            /** @description private Arch User number */
            privateArchUserCount?: number;
            /** @description collaborative Arch User number */
            collaborativeArchUserCount?: number;
        };
        UserActivitySearchRequest: {
            /** @description select geo */
            iot?: string;
            /** @description select bu */
            bu?: string;
            /** @description select focusRole */
            focusRole?: string;
            /** @description select type */
            type?: string;
            /** @description select timeType */
            timeType?: string;
            /**
             * Format: date-time
             * @description select start date
             */
            start?: string;
            /**
             * Format: date-time
             * @description select end date
             */
            end?: string;
        };
        UserActivitySearchResponseItem: {
            /** @description day string */
            day?: string;
            /** @description number */
            number?: number;
        };
        UserActivitySearchResponse: {
            /** @description result */
            result?: components["schemas"]["UserActivitySearchResponseItem"][];
        };
        RequestGetUserOrgResponse: {
            /** @description user org */
            org?: string;
        };
        checkTransferedOwnerOrgRequest: {
            /** @description archId */
            archId?: string;
            /** @description transfOwnerId */
            transfOwnerId?: string;
        };
        ExportGithubInfo: {
            /** @description github token */
            token?: string;
            /** @description github repo url */
            repoUrl?: string;
        };
        ExportArchViaGitPagesRequest: {
            /** @description github token */
            token?: string;
            /** @description github repo url */
            repoUrl?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /** This API is used to create a new architecture from scratch */
    createArch: {
        /** @description workspace name, type, client */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArchRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CreateArchRequest"];
                "application/xml": components["schemas"]["CreateArchRequest"];
                "text/xml": components["schemas"]["CreateArchRequest"];
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateArchResponse"];
                    "application/xml": components["schemas"]["CreateArchResponse"];
                    "text/xml": components["schemas"]["CreateArchResponse"];
                    "application/javascript": components["schemas"]["CreateArchResponse"];
                    "text/javascript": components["schemas"]["CreateArchResponse"];
                };
            };
            /** @description Invalid Input Parameters. */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API- Architect) */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The target User is not found. */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Gateway */
            502: {
                content: {
                    "text/javascript": string;
                };
            };
        };
    };
    /** This API is to get the information of an architecture */
    getArchInfo: {
        parameters: {
            path: {
                /** @description Target Architecture Id */
                archId: string;
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["GetArchInfoResponse"];
                    "application/xml": components["schemas"]["GetArchInfoResponse"];
                    "text/xml": components["schemas"]["GetArchInfoResponse"];
                    "application/javascript": components["schemas"]["GetArchInfoResponse"];
                    "text/javascript": components["schemas"]["GetArchInfoResponse"];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API- "PriArchOwner", "PriArchAdminMember", "PriArchViewMember", "PriArchEditMember", "PublicArchVisitor") */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The target Architecture is not found. */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Gateway */
            502: {
                content: {
                    "text/javascript": string;
                };
            };
        };
    };
    /** This API is to get Artifact Instance Summary List */
    getArtifactInstanceSummaryList: {
        parameters: {
            query: {
                /** @description Assetartifacttype of target instance. */
                artifactType: string;
                /** @description Assetartifacttype id. */
                artifactTypeId?: string;
            };
            path: {
                /** @description Target architecture id. */
                archId: string;
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["GetArtifactInstanceSummaryListResponse"][];
                    "application/xml": components["schemas"]["GetArtifactInstanceSummaryListResponse"][];
                    "text/xml": components["schemas"]["GetArtifactInstanceSummaryListResponse"][];
                    "application/javascript": components["schemas"]["GetArtifactInstanceSummaryListResponse"][];
                    "text/javascript": components["schemas"]["GetArtifactInstanceSummaryListResponse"][];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API- "PriArchOwner", "PriArchAdminMember", "PriArchViewMember", "PriArchEditMember", "PublicArchVisitor") */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Gateway */
            502: {
                content: {
                    "text/javascript": string;
                };
            };
        };
    };
    /** Create an artifact instance */
    createArtifactInstance: {
        parameters: {
            query: {
                artifactType: string;
                artifactTypeId: string;
                /** @description User's OIDC token(Only for CloudDeploymentModel in internal version). */
                accessToken?: string;
            };
            path: {
                archId: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ArtifactInstanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ArtifactInstanceRequest"];
                "application/xml": components["schemas"]["ArtifactInstanceRequest"];
                "text/xml": components["schemas"]["ArtifactInstanceRequest"];
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateArtifactInstanceResponse"];
                    "application/xml": components["schemas"]["CreateArtifactInstanceResponse"];
                    "text/xml": components["schemas"]["CreateArtifactInstanceResponse"];
                    "application/javascript": components["schemas"]["CreateArtifactInstanceResponse"];
                    "text/javascript": components["schemas"]["CreateArtifactInstanceResponse"];
                };
            };
            /** @description Unknown error */
            500: {
                content: {};
            };
        };
    };
    /** This API is to update an artifact instance */
    updateArtifactInstance: {
        parameters: {
            query: {
                /** @description Assetartifacttype of the target instance. */
                artifactType: string;
            };
            path: {
                /** @description Target architecture id */
                archId: string;
                /** @description Target instance id */
                instanceId: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ArtifactInstanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ArtifactInstanceRequest"];
                "application/xml": components["schemas"]["ArtifactInstanceRequest"];
                "text/xml": components["schemas"]["ArtifactInstanceRequest"];
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["IsSuccessResponse"];
                    "application/xml": components["schemas"]["IsSuccessResponse"];
                    "text/xml": components["schemas"]["IsSuccessResponse"];
                    "application/javascript": components["schemas"]["IsSuccessResponse"];
                    "text/javascript": components["schemas"]["IsSuccessResponse"];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API- "PriArchPenHolder", "PriArchInstancePenHolder") */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Gateway */
            502: {
                content: {
                    "text/javascript": string;
                };
            };
        };
    };
    /** Enter Artifact Instance */
    enterArtifactInstance: {
        parameters: {
            query: {
                /** @description Assetartifacttype of the target instance. */
                artifactType: string;
            };
            path: {
                /** @description Target architecture id */
                archId: string;
                /** @description Target instance id */
                instanceId: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnterArtifactInstanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EnterArtifactInstanceRequest"];
                "application/xml": components["schemas"]["EnterArtifactInstanceRequest"];
                "text/xml": components["schemas"]["EnterArtifactInstanceRequest"];
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["ArtifactInstanceResponse"];
                    "application/xml": components["schemas"]["ArtifactInstanceResponse"];
                    "text/xml": components["schemas"]["ArtifactInstanceResponse"];
                    "application/javascript": components["schemas"]["ArtifactInstanceResponse"];
                    "text/javascript": components["schemas"]["ArtifactInstanceResponse"];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API- "PriArchOwner", "PriArchAdminMember", "PriArchViewMember", "PriArchEditMember", "PublicArchVisitor") */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Gateway */
            502: {
                content: {
                    "text/javascript": string;
                };
            };
        };
    };
    /** Generate artifact instance diagram */
    generateDiagram: {
        parameters: {
            query: {
                /** @description Instance Artifact Type */
                artifactType: string;
                /** @description svg or png */
                format: string;
            };
            header?: {
                /** @description Target User Id */
                userId?: string;
            };
            path: {
                /** @description Target Architecture Id */
                archId: string;
                /** @description Target Instance Id */
                instanceId: string;
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: never;
            };
            /** @description Unknown error */
            500404: {
                content: never;
            };
        };
    };
    /** Export Arch as per client's needs */
    customizedExport: {
        parameters: {
            path: {
                /** @description Target Architecture Id */
                archId: string;
            };
        };
        /** @description The request body as per client's needs */
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: never;
            };
            /** @description Unknown error */
            500404: {
                content: never;
            };
        };
    };
    /** Search Published Architectures from keyword or catalog */
    search: {
        /** @description Search response data */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SearchRequest"];
                "application/xml": components["schemas"]["SearchRequest"];
                "text/xml": components["schemas"]["SearchRequest"];
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["SearchResponse"];
                    "application/xml": components["schemas"]["SearchResponse"];
                    "text/xml": components["schemas"]["SearchResponse"];
                    "application/javascript": components["schemas"]["SearchResponse"];
                    "text/javascript": components["schemas"]["SearchResponse"];
                };
            };
            /** @description Unknown error */
            404: {
                content: {};
            };
            /** @description Unknown error */
            500: {
                content: {};
            };
        };
    };
    /** This API is to join team as team view member, only for AsIs Arch. */
    visitAsIsArch: {
        parameters: {
            path: {
                /** @description Arch Id */
                archId: string;
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["IsSuccessResponse"];
                    "application/xml": components["schemas"]["IsSuccessResponse"];
                    "text/xml": components["schemas"]["IsSuccessResponse"];
                    "application/javascript": components["schemas"]["IsSuccessResponse"];
                    "text/javascript": components["schemas"]["IsSuccessResponse"];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API- "AsIsArchVisitor") */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Gateway */
            502: {
                content: {
                    "text/javascript": string;
                };
            };
        };
    };
    /** Get Architecture Artifact Catalog */
    "ArchitectureAPI.getArtifactCatalog": {
        parameters: {
            path: {
                /** @description Target architecture id */
                archId: string;
            };
        };
        responses: {
            /** @description Request was successful */
            200: {
                content: {
                    "application/json": components["schemas"]["GetArtifactCatalogResponse"][];
                    "application/xml": components["schemas"]["GetArtifactCatalogResponse"][];
                    "text/xml": components["schemas"]["GetArtifactCatalogResponse"][];
                    "application/javascript": components["schemas"]["GetArtifactCatalogResponse"][];
                    "text/javascript": components["schemas"]["GetArtifactCatalogResponse"][];
                };
            };
            /** @description Request user is not authorized (Only following roles are allowed to access this API-  "PriArchOwner", "PriArchAdminMember", "PriArchViewMember", "PriArchEditMember", "PublicArchVisitor") */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The target arch's ToC Template is not found. */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
